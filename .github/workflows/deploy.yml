name: build-and-deploy
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION:     ${{ vars.GKE_REGION }}          # ex: europe-west9
  CLUSTER:    ${{ vars.GKE_CLUSTER }}         # ex: mesh-demo-autopilot
  AR_LOC:     ${{ vars.ART_REG_LOCATION }}    # ex: europe
  REPO_ID:    docker

  # repo layout
  DOCKERFILE_ROOT: apps         # <-- Dockerfile sous apps/Dockerfile
  SERVICES_ROOT:   apps/apps    # <-- code source des services
  HELM_ROOT:       apps/helm    # <-- chart Helm

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    strategy:
      matrix: { service: [a, b, c] }
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account:           ${{ vars.GCP_SA_EMAIL }}

      - name: Docker login (Artifact Registry)
        shell: bash
        run: |
          set +x  # évite tout echo involontaire
          gcloud auth print-access-token \
            | docker login -u oauth2accesstoken --password-stdin https://${{ env.AR_LOC }}-docker.pkg.dev


      - name: Compute tags/registry
        id: vars
        run: |
          echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "REG=${{ env.AR_LOC }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_ID }}" >> $GITHUB_OUTPUT

      - name: Build & Push svc-${{ matrix.service }}
        run: |
          set -euo pipefail
          REG="${{ steps.vars.outputs.REG }}"
          SHA="${{ steps.vars.outputs.SHA }}"
          SVC="${{ matrix.service }}"

          # Cas 1 : Dockerfile sous apps/
          if [ -f "${DOCKERFILE_ROOT}/Dockerfile" ]; then
            echo "→ Build via ${DOCKERFILE_ROOT}/Dockerfile (context=repo root)"
            docker build -f "${DOCKERFILE_ROOT}/Dockerfile" \
              --build-arg SERVICE="$SVC" \
              -t "$REG/svc-$SVC:$SHA" .
          # Cas 2 : Dockerfile spécifique au service
          elif [ -f "${SERVICES_ROOT}/$SVC/Dockerfile" ]; then
            echo "→ Build via ${SERVICES_ROOT}/$SVC/Dockerfile"
            docker build -t "$REG/svc-$SVC:$SHA" "${SERVICES_ROOT}/$SVC"
          else
            echo "::error::Aucun Dockerfile trouvé (apps/Dockerfile ni ${SERVICES_ROOT}/$SVC/Dockerfile)"
            exit 1
          fi

          docker push "$REG/svc-$SVC:$SHA"

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account:           ${{ vars.GCP_SA_EMAIL }}

      - uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id:   ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.CLUSTER }}
          location:     ${{ env.REGION }}

      - name: Apply namespaces
        run: |
          if [ -f "k8s/namespaces.yaml" ]; then
            kubectl apply -f k8s/namespaces.yaml
          fi

      - name: Deploy with Helm (apps/helm)
        run: |
          set -euo pipefail
          SHA=$(git rev-parse --short HEAD)
          REG="${{ env.AR_LOC }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_ID }}"

          if [ ! -f "${HELM_ROOT}/app/Chart.yaml" ]; then
            echo "::error::Chart introuvable sous ${HELM_ROOT}/app"
            exit 1
          fi

          # Génère des fichiers values dynamiques avec image/tag corrects
          sed "s/GIT_SHA/$SHA/g; s|europe-docker.pkg.dev/PROJECT_ID/docker/svc-a|$REG/svc-a|g" ${HELM_ROOT}/values-a.yaml > /tmp/values-a.yaml
          sed "s/GIT_SHA/$SHA/g; s|europe-docker.pkg.dev/PROJECT_ID/docker/svc-b|$REG/svc-b|g" ${HELM_ROOT}/values-b.yaml > /tmp/values-b.yaml
          sed "s/GIT_SHA/$SHA/g; s|europe-docker.pkg.dev/PROJECT_ID/docker/svc-c|$REG/svc-c|g" ${HELM_ROOT}/values-c.yaml > /tmp/values-c.yaml

          helm upgrade --install a ${HELM_ROOT}/app -n mesh-demo -f /tmp/values-a.yaml --create-namespace=false
          helm upgrade --install b ${HELM_ROOT}/app -n mesh-demo -f /tmp/values-b.yaml --create-namespace=false
          helm upgrade --install c ${HELM_ROOT}/app -n legacy     -f /tmp/values-c.yaml --create-namespace=false

      - name: Wait for rollouts
        run: |
          kubectl -n mesh-demo rollout status deploy/svc-b --timeout=180s
          kubectl -n mesh-demo rollout status deploy/svc-a --timeout=180s
          kubectl -n legacy    rollout status deploy/svc-c --timeout=180s
